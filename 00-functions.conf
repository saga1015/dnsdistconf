-- Load domain-list from file and create actions/rules
-- block - when true it is blocklist, when false it is whitelist
-- negate - if true list is negated
function load_domain_list(file_name, block, negate, redirectdom)
    local file_found = io.open(file_name, "r")
    if file_found then
        if block then
            infolog("LOAD-DOMAIN-LIST: Loading blacklist " .. file_name)
        else
            infolog("LOAD-DOMAIN-LIST: Loading whitelist " .. file_name)
        end
        local doms = newSuffixMatchNode();
        local count = 0
        for dom in io.lines(file_name) do
            dom = trim(dom)
            if (dom:len() > 0) and (dom:match("^[a-zA-Z0-9%.%_%-]+$")) and (dom:sub(1, #"#") ~= "#") then
                count = count + 1
                doms:add(newDNSName(dom))
            end
        end

        if block then
            infolog("LOAD-BLOCK-DOMAIN-LIST: Loaded " .. file_name .. " - Added " .. count .. " entries")
            if negate then
                if redirectdom then
                    addAction(NotRule(SuffixMatchNodeRule(doms, false)), LuaAction(redirect_dom))
                else
                    addAction(NotRule(SuffixMatchNodeRule(doms, false)), LuaAction(block_dom))
                end
            else
                if redirectdom then
                    addAction(SuffixMatchNodeRule(doms, false), LuaAction(redirect_dom))
                else
                    addAction(SuffixMatchNodeRule(doms, false), LuaAction(block_dom))
                end
            end
        else
            infolog("LOAD-ALLOW-DOMAIN-LIST: Loaded " .. file_name .. " - Added " .. count .. " entries")
            addAction(SuffixMatchNodeRule(doms, false), LuaAction(allow_dom))
        end
    else
        errlog("LOAD-DOMAIN-LIST: File does not exist: " .. file_name)
    end
end

function load_ip_list(file_name, block, force)
    local file_found = io.open(file_name, "r")
    if file_found then
        if block then
            infolog("LOAD-IP-LIST: Loading blacklist " .. file_name)
        else
            infolog("LOAD-IP-LIST: Loading whitelist " .. file_name)
        end
        local ips = newNMG();
        local count = 0
        for ip in io.lines(file_name) do
            ip = trim(ip)
            if (ip:len() > 0) and (ip:sub(1, #"#") ~= "#") then
                if (force) or ((ip ~= "10.0.0.0/8") and (ip ~= "127.0.0.1") and (ip ~= "127.0.0.0/8") and (ip ~= "192.168.0.0/16") and (ip ~= "172.16.0.0/12") and (ip ~= "::1") and (ip ~= "fc00::/7")) then
                   count = count + 1
                   ips:addMask(ip)
                else
                   infolog("LOAD-IP-LIST: Skipped private range " .. ip)
                end
            end
        end
        if block then
            infolog("LOAD-BLOCK-IP-LIST: Loaded " .. file_name .. " - Added " .. count .. " entries")
            addAction(NetmaskGroupRule(ips, True), LuaAction(block_ip)) -- Source
        else
            infolog("LOAD-ALLOW-IP-LIST: Loaded " .. file_name .. " - Added " .. count .. " entries")
            addAction(NetmaskGroupRule(ips, True), LuaAction(allow_ip)) -- Source
        end
    else
        errlog("LOAD-IP-LIST: File does not exist: " .. file_name)
    end
end

-- Load regex-list from file and create actions/rules
-- block - when true it is blocklist, when false it is whitelist
function load_regex_list(file_name, block, redirectdom)
    local file_found = io.open(file_name, "r")
    if file_found then
        if block then
            infolog("LOAD-REGEX-LIST: Loading blacklist " .. file_name)
        else
            infolog("LOAD-REGEX-LIST: Loading whitelist " .. file_name)
        end
        local count = 0
        for regex in io.lines(file_name) do
            regex = trim(regex)
            if (not regex:find("%(%?%!")) then
                if (regex:len() > 2) and (regex:sub(1, #"#") ~= "#") then
                    count = count + 1
                    if block then
                        if redirectdom then
                            addAction(RegexRule(regex), LuaAction(block_dom))
                        else
                            addAction(RegexRule(regex), LuaAction(redirect_dom))
                        end
                    else
                        addAction(RegexRule(regex), LuaAction(allow_dom))
                    end
                end
            else
                warnlog("UNSUPPORTED-REGEX: " .. regex)
            end
        end
        if block then
            infolog("LOAD-BLOCK-REGEX-LIST: Loaded " .. file_name .. " - Added " .. count .. " entries")
        else
            infolog("LOAD-ALLOW-REGEX-LIST: Loaded " .. file_name .. " - Added " .. count .. " entries")
        end
    else
        errlog("File does not exist: " .. file_name)
    end
end

-- Trim whitspace/slashes/dots
function trim(s)
    return s:gsub("^%s+", ""):gsub("%s+$", ""):gsub("^%.+", ""):gsub("%.+$", ""):gsub("^/+", ""):gsub("/+$", "")
end

-- Whitelist functions
function allow_dom(dq)
    local qname = dq.qname:toString()
    -- local qclass = get_class(dq.qclass)
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    infolog("ALLOWED-DOMAIN: " .. qname .. "|" .. qtype .. " requested from " .. client)

    return DNSAction.Allow, ""
end

function allow_ip(dq)
    local qname = dq.qname:toString()
    -- local qclass = get_class(dq.qclass)
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    infolog("ALLOWED-CLIENT-IP: " .. client .. " requesting " .. qname .. "|" .. qtype)

    return DNSAction.Allow, ""
end

-- Blacklist functions
function block_dom(dq)
    local qname = dq.qname:toString()
    -- local qclass = get_class(dq.qclass)
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    warnlog("BLOCKED-DOMAIN: " .. qname .. "|" .. qtype .. " requested from " .. client .. " (NXDOMAIN)")

    return DNSAction.Nxdomain, ""
end

function block_dom_tld(dq)
    local qname = dq.qname:toString()
    -- local qclass = get_class(dq.qclass)
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    warnlog("BLOCKED-TLD-DOMAIN: " .. qname .. "|" .. qtype .. " requested from " .. client .. " (NXDOMAIN)")

    return DNSAction.Nxdomain, ""
end

function form_err(dq)
    local qname = dq.qname:toString()
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    warnlog("FORMERR/SERVFAIL: " .. qname .. "|" .. qtype .. " requested from " .. client)

    return DNSAction.ServFail, ""
end

function redirect_dom(dq)
    local qname = dq.qname:toString()
    -- local qclass = get_class(dq.qclass)
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    if (dq.qtype == DNSQType.A) then
        infolog("BLOCKED-DOMAIN: " .. qname .. "|" .. qtype .. " redirect to 0.0.0.0")
        return DNSAction.Spoof, "0.0.0.0"
    elseif (dq.qtype == DNSQType.AAAA) then
        infolog("BLOCKED-DOMAIN: " .. qname .. "|" .. qtype .. " redirect to ::")
        return DNSAction.Spoof, "::"
    end

    warnlog("BLOCKED-DOMAIN: " .. qname .. "|" .. qtype .. " requested from " .. client .. " (NXDOMAIN)")
    return DNSAction.Nxdomain, ""
end

function local_dom(dq)
    local qname = dq.qname:toString()
    -- local qclass = get_class(dq.qclass)
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    if (dq.qtype == DNSQType.A) then
        infolog("LOCAL-DOMAIN: " .. qname .. "|" .. qtype .. " to 192.168.1.32")
        return DNSAction.Spoof, "192.168.1.32"
    elseif (dq.qtype == DNSQType.AAAA) then
        infolog("LOCAL-DOMAIN: " .. qname .. "|" .. qtype .. " to 2001:981:1759:1::32")
        return DNSAction.Spoof, "2001:981:1759:1::32"
    end

    return DNSAction.None, ""
end

function block_ip(dq)
    local qname = dq.qname:toString()
    -- local qclass = get_class(dq.qclass)
    local qtype = get_rrtype(dq.qtype)
    local client = dq.remoteaddr:toString()

    warnlog("BLOCKED-CLIENT-IP: " .. client .. " requesting " .. qname .. "|" .. qtype)

    return DNSAction.Drop, ""
end

-- Get CLASS
function get_class(num)
    if (num == DNSClass.IN) then
        return "IN"
    elseif (num == DNSClass.CHAOS) then
        return "CH"
    elseif (num == DNSClass.NONE) then
	return "NONE"
    elseif (num == DNSClass.ANY) then
        return "ANY"
    end

    return "??"
end

-- Get RR-Type
function get_rrtype(num)
    if (num == DNSQType.A) then
        return "A"
    elseif (num == DNSQType.AAAA) then
        return "AAAA"
    elseif (num == DNSQType.ADDR) then
        return "ADDR"
    elseif (num == DNSQType.AFSDB) then
        return "AFSDB"
    elseif (num == DNSQType.ALIAS) then
        return "ALIAS"
    elseif (num == DNSQType.ANY) then
        return "ANY"
    elseif (num == DNSQType.AXFR) then
        return "AXFR"
    elseif (num == DNSQType.CAA) then
        return "CAA"
    elseif (num == DNSQType.CDNSKEY) then
        return "CDNSKEY"
    elseif (num == DNSQType.CDS) then
        return "CDS"
    elseif (num == DNSQType.CERT) then
        return "CERT"
    elseif (num == DNSQType.CNAME) then
        return "CNAME"
    elseif (num == DNSQType.DHCID) then
        return "DHCID"
    elseif (num == DNSQType.DLV) then
        return "DLV"
    elseif (num == DNSQType.DNAME) then
        return "DNAME"
    elseif (num == DNSQType.DNSKEY) then
        return "DNSKEY"
    elseif (num == DNSQType.DS) then
        return "DS"
    elseif (num == DNSQType.ENT) then
        return "ENT"
    elseif (num == DNSQType.HINFO) then
        return "HINFO"
    elseif (num == DNSQType.IPSECKEY) then
        return "IPSECKEY"
    elseif (num == DNSQType.IXFR) then
        return "IXFR"
    elseif (num == DNSQType.KEY) then
        return "KEY"
    elseif (num == DNSQType.KX) then
        return "KX"
    elseif (num == DNSQType.LOC) then
        return "LOC"
    elseif (num == DNSQType.LUA) then
        return "LUA"
    elseif (num == DNSQType.MAILA) then
        return "MAILA"
    elseif (num == DNSQType.MAILB) then
        return "MAILB"
    elseif (num == DNSQType.MB) then
        return "MB"
    elseif (num == DNSQType.MG) then
        return "MG"
    elseif (num == DNSQType.MINFO) then
        return "MINFO"
    elseif (num == DNSQType.MR) then
        return "MR"
    elseif (num == DNSQType.MX) then
        return "MX"
    elseif (num == DNSQType.NAPTR) then
        return "NAPTR"
    elseif (num == DNSQType.NS) then
        return "NS"
    elseif (num == DNSQType.NSEC) then
        return "NSEC"
    elseif (num == DNSQType.OPENPGPKEY) then
        return "OPENPGPKEY"
    elseif (num == DNSQType.OPT) then
        return "OPT"
    elseif (num == DNSQType.PTR) then
        return "PTR"
    elseif (num == DNSQType.RKEY) then
        return "RKEY"
    elseif (num == DNSQType.RP) then
        return "RP"
    elseif (num == DNSQType.RRSIG) then
        return "RRSIG"
    elseif (num == DNSQType.SIG) then
        return "SIG"
    elseif (num == DNSQType.SMIMEA) then
        return "SMIMEA"
    elseif (num == DNSQType.SOA) then
        return "SOA"
    elseif (num == DNSQType.SPF) then
        return "SPF"
    elseif (num == DNSQType.SRV) then
        return "SRV"
    elseif (num == DNSQType.SSHFP) then
        return "SSHFP"
    elseif (num == DNSQType.TKEY) then
        return "TKEY"
    elseif (num == DNSQType.TLSA) then
        return "TLSA"
    elseif (num == DNSQType.TSIG) then
        return "TSIG"
    elseif (num == DNSQType.TXT) then
        return "TXT"
    elseif (num == DNSQType.URI) then
        return "URI"
    end

    return "??"
end
